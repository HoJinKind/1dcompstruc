
global Inst {
  const ADD = 6h0;
  const SUB = 6h1;
  const MUL = 6h2;
  const AND = 6h18;
  const OR = 6h1e;
  const XOR = 6h16;
  const LDR = 6h1a;
  const SHL = 6h20;
  const SHR = 6h21;
  const SRA = 6h23;
  const CMPEQ = 6h33;
  const CMPLT = 6h35;
  const CMPLE = 6h37;
  const DIVIDE   = 6h3;
  
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
 
    input modeInput,
    input startInput,
    input addInput,
    input subInput,
    input multInput,
    input divInput,
    input increaseInput,
    output outputModeOne,
    output outputModeTwo,
    output outputButtonLight,   // single Digit select on IO Shield
    output io_seg1 [7],      // 7-segment LEDs on IO Shield
    output io_sel1 [4],      // Digit select on IO Shield
    output io_seg2 [7],      // 7-segment LEDs on IO Shield
    output io_sel2 [4],     // Digit select on IO Shield
    output io_seg4 [7],   // single 7-segment LEDs on IO Shield
    output io_sel4 [4]   // single Digit select on IO Shield
    
  ) {
  
  sig rst;                  // reset signal
  
  dff test_counter[30](.clk(clk), .rst(rst));
  emulator emulator1(.clk(clk),.rst(rst));// instance of emulator

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_mode_input;
    edge_detector edge_mode_input (#RISE(1), #FALL(0));
    button_conditioner btn_start_input;
    edge_detector edge_start_input (#RISE(1), #FALL(0));
    button_conditioner btn_increase_input;
    edge_detector edge_increase_input (#RISE(1), #FALL(0));
    button_conditioner btn_add_input;
    edge_detector edge_add_input (#RISE(1), #FALL(0));
    button_conditioner btn_sub_input;
    edge_detector edge_sub_input (#RISE(1), #FALL(0));
    button_conditioner btn_div_input;
    edge_detector edge_div_input (#RISE(1), #FALL(0));
    button_conditioner btn_mult_input;
    edge_detector edge_mult_input (#RISE(1), #FALL(0));

    .rst(rst) {
      // states alternate between each possible alu operation based on the buttons pressed
      
      // ERROR simulates the error case for adder.
      fsm state = {IDLE,ADDB,STARTROUNDA,STARTROUNDB,WAITARITHMETIC,ADDCOUNTER,COMPARECOUNTER,SHOWCURRENT,COMPAREHIGHSCORE,SETHIGHSCORE,RESETIDLE};
      multi_seven_seg seg;
      multi_seven_seg seg2;
      multi_seven_seg seg4;
  
      dff currentscore[16];
      dff counter[4];
      dff highscore[16];
      dff b[16];
      dff buttonGameMode;//button toggle mode

    }    
  }
  const DELAYTIME = 29;
  bin_to_dec convertHS(#DIGITS(4), #LEADING_ZEROS(1));
  bin_to_dec convertCS(#DIGITS(4), #LEADING_ZEROS(1));

  always {
  
    btn_mode_input.in = modeInput; // io_button[4] is the "right" button
    edge_mode_input.in = btn_mode_input.out; // connect the button to the edge edge_detector
    
    btn_start_input.in = startInput; // io_button[4] is the "right" button
    edge_start_input.in = btn_start_input.out; // connect the button to the edge edge_detector
    
    btn_increase_input.in = increaseInput; // io_button[4] is the "right" button
    edge_increase_input.in = btn_increase_input.out; // connect the button to the edge edge_detector
    
    btn_add_input.in = addInput; // io_button[4] is the "right" button
    edge_add_input.in = btn_add_input.out; // connect the button to the edge edge_detector
    btn_sub_input.in = subInput; // io_button[4] is the "right" button
    edge_sub_input.in = btn_sub_input.out; // connect the button to the edge edge_detector
    
    btn_mult_input.in = multInput; // io_button[4] is the "right" button
    edge_mult_input.in = btn_mult_input.out; // connect the button to the edge edge_detector
    
    btn_div_input.in = divInput; // io_button[4] is the "right" button
    edge_div_input.in = btn_div_input.out; // connect the button to the edge edge_detector
    //check if it is negative number
    if (emulator1.highscore_output[15]){
    convertHS.value = ~emulator1.highscore_output+1;//these values only go up to 9999
    }
    else{
    convertHS.value = emulator1.highscore_output;
    }

    if (emulator1.currentscore_output[15]){
    convertCS.value = ~emulator1.highscore_output+1;//these values only go up to 9999
    }
    else{
    convertCS.value = emulator1.highscore_output;
    }

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //mode 1/2 led lights
    outputModeOne=~emulator1.mode_output;
    outputModeTwo=emulator1.mode_output;
    outputButtonLight=0;    // this is the led for big start button
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
 

    
    // Manual testing (dip switches used)    a[15:0] = io_dip[0];

    
    // start initiates the testing for each module
   //rmb to set emulator values. 
   
    //initialise right to be 0 for all registers
    emulator1.whs=0;
    emulator1.wcs=0;
    emulator1.wcounter=0;
    emulator1.wb=0;
    emulator1.whs=0;
    emulator1.wmode = 0;
    emulator1.asel=3b001;//select  mode
    emulator1.bsel=3b000;
    emulator1.alufn= Inst.ADD;
    //set the values of everyth in the cases
    case (state.q) {
        state.IDLE:
          outputButtonLight=1;
          led[0]=1;
          emulator1.asel=3b001;//select  mode
          emulator1.bsel=3b000;
          emulator1.alufn= Inst.ADD;
       //toggle between modes
          counter.d =1;
          emulator1.alufn = Inst.ADD;
          convertCS.value=16haaaa;//in this mode, display to 
          case (edge_mode_input.out){
              1:
                emulator1.wmode = 1;
                //allow to write into mod
                  
          }
  
          case(edge_start_input.out){
            1:  //print current
                //if button start which is input, is 1, then go already. no hesitation
                state.d=state.ADDB;
                
  
            
               
          }
        state.ADDB:
            emulator1.wb=1;
            emulator1.asel=3b011;//select b value
            emulator1.bsel=3b000;
            emulator1.alufn= Inst.ADD;
                //add b by 1,check which mode to go to
                
                if(emulator1.mode_output[0]==0)
                {
                    state.d =state.STARTROUNDA;
                }
                else{
                    
                    state.d =state.STARTROUNDB;
                }
        
        state.STARTROUNDA: 
            led[1]=1;
            if(test_counter.q[26]==1){
              outputButtonLight=1;
            }
            if (edge_start_input.out){
                        
            state.d = state.WAITARITHMETIC;
            }

        state.STARTROUNDB:
          led[2]=1;//show state
          if(test_counter.q[26]==1){
              outputButtonLight=1;
          }
          

          if (edge_increase_input.out ){
            if(emulator1.b_output<5){
          emulator1.asel=3b011;//select b value
          emulator1.bsel=3b000;//select constant 1
          emulator1.alufn= Inst.ADD;
          emulator1.wb=1;
            }
            else{
              //set to 1
              emulator1.asel=3b100;//select 0
              emulator1.bsel=3b000;//select constant 1
              emulator1.alufn= Inst.ADD;
              emulator1.wb=1;
            }
          }
          //in here, we display b, or maybe evrywhere :)
          if (edge_start_input.out){
            state.d = state.WAITARITHMETIC;

          }

  
        state.WAITARITHMETIC:
          led[3]=1;//show state
          emulator1.asel =3b000;
          emulator1.bsel = 3b011;
          
          if(edge_add_input.out){
          
          emulator1.wcs = 1;//enable write to currentscore
          emulator1.alufn = Inst.ADD; //done operation, now need to set value to new current score
          state.d = state.ADDCOUNTER;   

          //
          }
          if(edge_sub_input.out){
          
          emulator1.wcs = 1;//enable write to currentscore
          emulator1.alufn = Inst.SUB;
          state.d = state.ADDCOUNTER;   

          }
          if (edge_mult_input.out){
          
          emulator1.wcs = 1;//enable write to currentscore
           
          emulator1.alufn = Inst.MUL;
          state.d = state.ADDCOUNTER;    

          }
        if (edge_div_input.out){
          emulator1.asel =3b100;
          emulator1.wcs = 1;//enable write to currentscore
          emulator1.alufn = Inst.LDR;
          state.d = state.ADDCOUNTER;    
          }
        
         
        
        state.ADDCOUNTER:
          led[4]=1;
          emulator1.asel =3b010;//select counter
          emulator1.bsel = 3b000;//select hardcode 1
          emulator1.alufn = Inst.ADD;
          emulator1.wcounter =1 ;
          state.d = state.COMPARECOUNTER;   
          
        
        state.COMPARECOUNTER:
          led[5]=1;
          emulator1.asel =3b010;//select counter
          emulator1.bsel = 3b001;//select hardcoded max rounds
          emulator1.alufn = Inst.CMPEQ;//check if hit the max rounds.
          if (emulator1.aluresult[0]){
              state.d = state.SHOWCURRENT;
                
          }
          else{
              if(emulator1.mode_output){
                  state.d = state.STARTROUNDB;
              }
              else{
                  state.d= state.ADDB;
              }
          }
            

      
        state.SHOWCURRENT:
          if(edge_start_input.out){
            state.d = state.COMPAREHIGHSCORE;
          }
        state.COMPAREHIGHSCORE:
          led[4]=1;  
          emulator1.asel =3b000;//select currentscore
          emulator1.bsel = 3b010;//select highscore
          emulator1.alufn = Inst.CMPLT;//check if current score less than high
            emulator1.alufn=Inst.CMPLT;
            if (emulator1.aluresult[0]==0){
                state.d = state.SETHIGHSCORE;
            }
            else{state.d= state.RESETIDLE;
            }
        
        state.SETHIGHSCORE:
          emulator1.asel =3b000;//select currentscore
          emulator1.bsel = 3b010;//select highscore
          emulator1.alufn = Inst.LDR;//check if current score less than highscore
          state.d = state.RESETIDLE;
        
        state.RESETIDLE:
          emulator1.asel =3b100;
          emulator1.wcs = 1;//enable write to currentscore
          emulator1.wb =1;
          emulator1.wcounter =1;
          emulator1.alufn = Inst.LDR;
          state.d = state.IDLE;    
          



        
            
    }
    
    io_seg1 = 8hff;          // turn segments off
    io_sel1 = 4hf;           // select no digits
    
    io_seg1 = ~seg.segs;
    io_sel1 = ~seg.sel;
    
    io_seg2 = 8hff;          // turn segments off
    io_sel2 = 4hf;           // select no digits
    io_seg2 = ~seg2.segs;
    io_sel2 = ~seg2.sel;
    
    
    io_seg4= 8hff;          // turn segments off
    io_sel4= 4hf;           // select no digits
    io_seg4= ~seg4.segs;
    io_sel4= ~seg4.sel;
    seg.values = convertHS.digits;
    seg2.values = convertCS.digits;
    seg4.values = {emulator1.highscore_output[15]?4d11:4d10,
                   emulator1.currentscore_output[15]?4d11:4d10,
                   emulator1.counter_output[3:0],
                   emulator1.b_output[3:0]};
    
   
    test_counter.d = test_counter.q + 1;
    
  }
}