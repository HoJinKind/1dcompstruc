/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] result
  );
  
  
  
  wire [16-1:0] M_adderModule_result;
  reg [16-1:0] M_adderModule_a;
  reg [16-1:0] M_adderModule_b;
  reg [6-1:0] M_adderModule_alufn;
  adderModule_16 adderModule (
    .a(M_adderModule_a),
    .b(M_adderModule_b),
    .alufn(M_adderModule_alufn),
    .result(M_adderModule_result)
  );
  
  wire [16-1:0] M_booleanModule_result;
  reg [16-1:0] M_booleanModule_a;
  reg [16-1:0] M_booleanModule_b;
  reg [6-1:0] M_booleanModule_alufn;
  booleanModule_17 booleanModule (
    .a(M_booleanModule_a),
    .b(M_booleanModule_b),
    .alufn(M_booleanModule_alufn),
    .result(M_booleanModule_result)
  );
  
  wire [16-1:0] M_compareModule_result;
  reg [16-1:0] M_compareModule_a;
  reg [16-1:0] M_compareModule_b;
  reg [8-1:0] M_compareModule_alufn;
  compareModule_18 compareModule (
    .a(M_compareModule_a),
    .b(M_compareModule_b),
    .alufn(M_compareModule_alufn),
    .result(M_compareModule_result)
  );
  
  wire [16-1:0] M_shiftModule_result;
  reg [16-1:0] M_shiftModule_a;
  reg [16-1:0] M_shiftModule_b;
  reg [6-1:0] M_shiftModule_alufn;
  shiftModule_19 shiftModule (
    .a(M_shiftModule_a),
    .b(M_shiftModule_b),
    .alufn(M_shiftModule_alufn),
    .result(M_shiftModule_result)
  );
  
  wire [16-1:0] M_multiplicationModule_result;
  reg [16-1:0] M_multiplicationModule_a;
  reg [16-1:0] M_multiplicationModule_b;
  reg [6-1:0] M_multiplicationModule_alufn;
  multiplicationModule_20 multiplicationModule (
    .a(M_multiplicationModule_a),
    .b(M_multiplicationModule_b),
    .alufn(M_multiplicationModule_alufn),
    .result(M_multiplicationModule_result)
  );
  
  wire [16-1:0] M_divideMdle_result;
  reg [16-1:0] M_divideMdle_a;
  reg [16-1:0] M_divideMdle_b;
  reg [6-1:0] M_divideMdle_alufn;
  divideMdle_21 divideMdle (
    .a(M_divideMdle_a),
    .b(M_divideMdle_b),
    .alufn(M_divideMdle_alufn),
    .result(M_divideMdle_result)
  );
  
  always @* begin
    result = 1'h0;
    M_adderModule_a = a;
    M_adderModule_b = b;
    M_adderModule_alufn = alufn;
    M_divideMdle_a = a;
    M_divideMdle_b = b;
    M_divideMdle_alufn = alufn;
    M_booleanModule_a = a;
    M_booleanModule_b = b;
    M_booleanModule_alufn = alufn;
    M_compareModule_a = a;
    M_compareModule_b = b;
    M_compareModule_alufn = alufn;
    M_shiftModule_a = a;
    M_shiftModule_b = b;
    M_shiftModule_alufn = alufn;
    M_multiplicationModule_a = a;
    M_multiplicationModule_b = b;
    M_multiplicationModule_alufn = alufn;
    
    case (alufn)
      6'h00: begin
        result = M_adderModule_result;
      end
      6'h01: begin
        result = M_adderModule_result;
      end
      6'h02: begin
        result = M_multiplicationModule_result;
      end
      6'h18: begin
        result = M_booleanModule_result;
      end
      6'h1e: begin
        result = M_booleanModule_result;
      end
      6'h16: begin
        result = M_booleanModule_result;
      end
      6'h1a: begin
        result = M_booleanModule_result;
      end
      6'h33: begin
        result = M_compareModule_result;
      end
      6'h35: begin
        result = M_compareModule_result;
      end
      6'h37: begin
        result = M_compareModule_result;
      end
      6'h20: begin
        result = M_shiftModule_result;
      end
      6'h21: begin
        result = M_shiftModule_result;
      end
      6'h23: begin
        result = M_shiftModule_result;
      end
      6'h03: begin
        result = M_divideMdle_result;
      end
      default: begin
        result = 18'h00001;
      end
    endcase
  end
endmodule
