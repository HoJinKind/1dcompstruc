/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module emulator_1 (
    input clk,
    input rst,
    input whs,
    input wcs,
    input wb,
    input wcounter,
    input wmode,
    input [5:0] alufn,
    input [2:0] asel,
    input [2:0] bsel,
    output reg [15:0] currentscore_output,
    output reg [15:0] highscore_output,
    output reg [15:0] b_output,
    output reg [15:0] mode_output,
    output reg [15:0] aluresult
  );
  
  
  
  wire [16-1:0] M_mux_a_out;
  reg [16-1:0] M_mux_a_a;
  reg [16-1:0] M_mux_a_b;
  reg [16-1:0] M_mux_a_c;
  reg [16-1:0] M_mux_a_d;
  reg [16-1:0] M_mux_a_e;
  reg [3-1:0] M_mux_a_sel;
  mux_5_17 mux_a (
    .a(M_mux_a_a),
    .b(M_mux_a_b),
    .c(M_mux_a_c),
    .d(M_mux_a_d),
    .e(M_mux_a_e),
    .sel(M_mux_a_sel),
    .out(M_mux_a_out)
  );
  
  wire [16-1:0] M_mux_b_out;
  reg [16-1:0] M_mux_b_a;
  reg [16-1:0] M_mux_b_b;
  reg [16-1:0] M_mux_b_c;
  reg [16-1:0] M_mux_b_d;
  reg [16-1:0] M_mux_b_e;
  reg [3-1:0] M_mux_b_sel;
  mux_5_17 mux_b (
    .a(M_mux_b_a),
    .b(M_mux_b_b),
    .c(M_mux_b_c),
    .d(M_mux_b_d),
    .e(M_mux_b_e),
    .sel(M_mux_b_sel),
    .out(M_mux_b_out)
  );
  
  wire [16-1:0] M_alu_result;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_2 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .result(M_alu_result)
  );
  
  wire [16-1:0] M_highscore_out;
  reg [1-1:0] M_highscore_write;
  reg [16-1:0] M_highscore_value;
  register_20 highscore (
    .clk(clk),
    .rst(rst),
    .write(M_highscore_write),
    .value(M_highscore_value),
    .out(M_highscore_out)
  );
  wire [16-1:0] M_currentscore_out;
  reg [1-1:0] M_currentscore_write;
  reg [16-1:0] M_currentscore_value;
  register_20 currentscore (
    .clk(clk),
    .rst(rst),
    .write(M_currentscore_write),
    .value(M_currentscore_value),
    .out(M_currentscore_out)
  );
  wire [16-1:0] M_b_out;
  reg [1-1:0] M_b_write;
  reg [16-1:0] M_b_value;
  register_20 b (
    .clk(clk),
    .rst(rst),
    .write(M_b_write),
    .value(M_b_value),
    .out(M_b_out)
  );
  wire [16-1:0] M_counter_out;
  reg [1-1:0] M_counter_write;
  reg [16-1:0] M_counter_value;
  register_20 counter (
    .clk(clk),
    .rst(rst),
    .write(M_counter_write),
    .value(M_counter_value),
    .out(M_counter_out)
  );
  wire [16-1:0] M_mode_out;
  reg [1-1:0] M_mode_write;
  reg [16-1:0] M_mode_value;
  register_20 mode (
    .clk(clk),
    .rst(rst),
    .write(M_mode_write),
    .value(M_mode_value),
    .out(M_mode_out)
  );
  
  always @* begin
    M_highscore_write = whs;
    M_currentscore_write = wcs;
    M_b_write = wb;
    M_mode_write = wmode;
    M_counter_write = wcounter;
    M_mux_a_sel = asel;
    M_mux_a_a = M_currentscore_out;
    M_mux_a_b = M_mode_out;
    M_mux_a_c = M_counter_out;
    M_mux_a_d = M_b_out;
    M_mux_a_e = 16'h0000;
    M_mux_b_sel = bsel;
    M_mux_b_a = 16'h0001;
    M_mux_b_b = 16'h0005;
    M_mux_b_c = M_highscore_out;
    M_mux_b_d = M_b_out;
    M_mux_b_e = 16'h0000;
    M_alu_a = M_mux_a_out;
    M_alu_alufn = alufn;
    M_alu_b = M_mux_b_out;
    aluresult = M_alu_result;
    M_b_value = M_alu_result;
    M_counter_value = M_alu_result;
    M_highscore_value = M_alu_result;
    M_currentscore_value = M_alu_result;
    M_b_value = M_alu_result;
    M_mode_value = M_alu_result;
    currentscore_output = M_currentscore_out;
    highscore_output = M_highscore_out;
    b_output = M_b_out;
    mode_output = M_mode_out;
  end
endmodule
